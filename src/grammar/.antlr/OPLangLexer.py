# Generated from /home/tdung/assignment/PPL/oplang-compiler/src/grammar/OPLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,36,223,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        30,1,30,1,30,1,31,1,31,5,31,183,8,31,10,31,12,31,186,9,31,1,32,4,
        32,189,8,32,11,32,12,32,190,1,33,1,33,1,33,5,33,196,8,33,10,33,12,
        33,199,9,33,1,33,1,33,1,34,4,34,204,8,34,11,34,12,34,205,1,34,1,
        34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,219,8,37,10,
        37,12,37,222,9,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,0,61,0,
        63,30,65,31,67,32,69,33,71,34,73,35,75,36,1,0,8,5,0,34,34,39,39,
        92,92,110,110,116,116,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,94,
        94,128,65535,4,0,10,10,13,13,34,34,92,92,227,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,
        0,3,81,1,0,0,0,5,86,1,0,0,0,7,89,1,0,0,0,9,94,1,0,0,0,11,100,1,0,
        0,0,13,107,1,0,0,0,15,109,1,0,0,0,17,111,1,0,0,0,19,113,1,0,0,0,
        21,115,1,0,0,0,23,119,1,0,0,0,25,121,1,0,0,0,27,124,1,0,0,0,29,127,
        1,0,0,0,31,129,1,0,0,0,33,131,1,0,0,0,35,134,1,0,0,0,37,137,1,0,
        0,0,39,139,1,0,0,0,41,141,1,0,0,0,43,143,1,0,0,0,45,145,1,0,0,0,
        47,147,1,0,0,0,49,149,1,0,0,0,51,153,1,0,0,0,53,158,1,0,0,0,55,163,
        1,0,0,0,57,168,1,0,0,0,59,175,1,0,0,0,61,177,1,0,0,0,63,180,1,0,
        0,0,65,188,1,0,0,0,67,192,1,0,0,0,69,203,1,0,0,0,71,209,1,0,0,0,
        73,211,1,0,0,0,75,214,1,0,0,0,77,78,5,118,0,0,78,79,5,97,0,0,79,
        80,5,114,0,0,80,2,1,0,0,0,81,82,5,102,0,0,82,83,5,117,0,0,83,84,
        5,110,0,0,84,85,5,99,0,0,85,4,1,0,0,0,86,87,5,105,0,0,87,88,5,102,
        0,0,88,6,1,0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,5,115,0,0,
        92,93,5,101,0,0,93,8,1,0,0,0,94,95,5,119,0,0,95,96,5,104,0,0,96,
        97,5,105,0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,10,1,0,0,0,100,101,
        5,114,0,0,101,102,5,101,0,0,102,103,5,116,0,0,103,104,5,117,0,0,
        104,105,5,114,0,0,105,106,5,110,0,0,106,12,1,0,0,0,107,108,5,43,
        0,0,108,14,1,0,0,0,109,110,5,45,0,0,110,16,1,0,0,0,111,112,5,42,
        0,0,112,18,1,0,0,0,113,114,5,47,0,0,114,20,1,0,0,0,115,116,5,109,
        0,0,116,117,5,111,0,0,117,118,5,100,0,0,118,22,1,0,0,0,119,120,5,
        61,0,0,120,24,1,0,0,0,121,122,5,61,0,0,122,123,5,61,0,0,123,26,1,
        0,0,0,124,125,5,33,0,0,125,126,5,61,0,0,126,28,1,0,0,0,127,128,5,
        60,0,0,128,30,1,0,0,0,129,130,5,62,0,0,130,32,1,0,0,0,131,132,5,
        60,0,0,132,133,5,61,0,0,133,34,1,0,0,0,134,135,5,62,0,0,135,136,
        5,61,0,0,136,36,1,0,0,0,137,138,5,40,0,0,138,38,1,0,0,0,139,140,
        5,41,0,0,140,40,1,0,0,0,141,142,5,123,0,0,142,42,1,0,0,0,143,144,
        5,125,0,0,144,44,1,0,0,0,145,146,5,59,0,0,146,46,1,0,0,0,147,148,
        5,44,0,0,148,48,1,0,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,
        152,5,116,0,0,152,50,1,0,0,0,153,154,5,99,0,0,154,155,5,104,0,0,
        155,156,5,97,0,0,156,157,5,114,0,0,157,52,1,0,0,0,158,159,5,98,0,
        0,159,160,5,111,0,0,160,161,5,111,0,0,161,162,5,108,0,0,162,54,1,
        0,0,0,163,164,5,118,0,0,164,165,5,111,0,0,165,166,5,105,0,0,166,
        167,5,100,0,0,167,56,1,0,0,0,168,169,5,115,0,0,169,170,5,116,0,0,
        170,171,5,114,0,0,171,172,5,105,0,0,172,173,5,110,0,0,173,174,5,
        103,0,0,174,58,1,0,0,0,175,176,7,0,0,0,176,60,1,0,0,0,177,178,5,
        92,0,0,178,179,3,59,29,0,179,62,1,0,0,0,180,184,7,1,0,0,181,183,
        7,2,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,
        1,0,0,0,185,64,1,0,0,0,186,184,1,0,0,0,187,189,7,3,0,0,188,187,1,
        0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,66,1,0,
        0,0,192,197,5,34,0,0,193,196,8,4,0,0,194,196,3,61,30,0,195,193,1,
        0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,
        0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,34,0,0,201,68,1,
        0,0,0,202,204,7,5,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,
        0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,6,34,0,0,208,70,1,
        0,0,0,209,210,7,6,0,0,210,72,1,0,0,0,211,212,5,92,0,0,212,213,8,
        0,0,0,213,74,1,0,0,0,214,220,5,34,0,0,215,219,8,7,0,0,216,217,5,
        92,0,0,217,219,9,0,0,0,218,215,1,0,0,0,218,216,1,0,0,0,219,222,1,
        0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,76,1,0,0,0,222,220,1,0,
        0,0,8,0,184,190,195,197,205,218,220,1,6,0,0
    ]

class OPLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VAR = 1
    FUNC = 2
    IF = 3
    ELSE = 4
    WHILE = 5
    RETURN = 6
    PLUS = 7
    MINUS = 8
    MUL = 9
    DIV = 10
    MOD = 11
    ASSIGN = 12
    EQ = 13
    NEQ = 14
    LT = 15
    GT = 16
    LEQ = 17
    GEQ = 18
    LPAREN = 19
    RPAREN = 20
    LBRACE = 21
    RBRACE = 22
    SEMICOLON = 23
    COMMA = 24
    INT = 25
    CHAR = 26
    BOOL = 27
    VOID = 28
    STRING = 29
    ID = 30
    INTLIT = 31
    STRINGLIT = 32
    WS = 33
    ERROR_CHAR = 34
    ILLEGAL_ESCAPE = 35
    UNCLOSE_STRING = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'func'", "'if'", "'else'", "'while'", "'return'", 
            "'+'", "'-'", "'*'", "'/'", "'mod'", "'='", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'{'", "'}'", "';'", 
            "','", "'int'", "'char'", "'bool'", "'void'", "'string'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "FUNC", "IF", "ELSE", "WHILE", "RETURN", "PLUS", "MINUS", 
            "MUL", "DIV", "MOD", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LEQ", 
            "GEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", 
            "COMMA", "INT", "CHAR", "BOOL", "VOID", "STRING", "ID", "INTLIT", 
            "STRINGLIT", "WS", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "VAR", "FUNC", "IF", "ELSE", "WHILE", "RETURN", "PLUS", 
                  "MINUS", "MUL", "DIV", "MOD", "ASSIGN", "EQ", "NEQ", "LT", 
                  "GT", "LEQ", "GEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "SEMICOLON", "COMMA", "INT", "CHAR", "BOOL", "VOID", "STRING", 
                  "ESCSEQPART", "ESCSEQ", "ID", "INTLIT", "STRINGLIT", "WS", 
                  "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "OPLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


